// Code generated by mockery v2.35.4. DO NOT EDIT.

package log

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/smartcontractkit/chainlink/v2/core/services/pg"
)

// mockORM is an autogenerated mock type for the ORM type
type mockORM struct {
	mock.Mock
}

// CreateBroadcast provides a mock function with given fields: blockHash, blockNumber, logIndex, jobID, qopts
func (_m *mockORM) CreateBroadcast(blockHash common.Hash, blockNumber uint64, logIndex uint, jobID int32, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, blockHash, blockNumber, logIndex, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, uint64, uint, int32, ...pg.QOpt) error); ok {
		r0 = rf(blockHash, blockNumber, logIndex, jobID, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBroadcasts provides a mock function with given fields: fromBlockNum, toBlockNum
func (_m *mockORM) FindBroadcasts(fromBlockNum int64, toBlockNum int64) ([]LogBroadcast, error) {
	ret := _m.Called(fromBlockNum, toBlockNum)

	var r0 []LogBroadcast
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]LogBroadcast, error)); ok {
		return rf(fromBlockNum, toBlockNum)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []LogBroadcast); ok {
		r0 = rf(fromBlockNum, toBlockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]LogBroadcast)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(fromBlockNum, toBlockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingMinBlock provides a mock function with given fields: qopts
func (_m *mockORM) GetPendingMinBlock(qopts ...pg.QOpt) (*int64, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(...pg.QOpt) (*int64, error)); ok {
		return rf(qopts...)
	}
	if rf, ok := ret.Get(0).(func(...pg.QOpt) *int64); ok {
		r0 = rf(qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(...pg.QOpt) error); ok {
		r1 = rf(qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkBroadcastConsumed provides a mock function with given fields: blockHash, blockNumber, logIndex, jobID, qopts
func (_m *mockORM) MarkBroadcastConsumed(blockHash common.Hash, blockNumber uint64, logIndex uint, jobID int32, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, blockHash, blockNumber, logIndex, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, uint64, uint, int32, ...pg.QOpt) error); ok {
		r0 = rf(blockHash, blockNumber, logIndex, jobID, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkBroadcastsConsumed provides a mock function with given fields: blockHashes, blockNumbers, logIndexes, jobIDs, qopts
func (_m *mockORM) MarkBroadcastsConsumed(blockHashes []common.Hash, blockNumbers []uint64, logIndexes []uint, jobIDs []int32, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, blockHashes, blockNumbers, logIndexes, jobIDs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func([]common.Hash, []uint64, []uint, []int32, ...pg.QOpt) error); ok {
		r0 = rf(blockHashes, blockNumbers, logIndexes, jobIDs, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkBroadcastsUnconsumed provides a mock function with given fields: fromBlock, qopts
func (_m *mockORM) MarkBroadcastsUnconsumed(fromBlock int64, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, fromBlock)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, ...pg.QOpt) error); ok {
		r0 = rf(fromBlock, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reinitialize provides a mock function with given fields: qopts
func (_m *mockORM) Reinitialize(qopts ...pg.QOpt) (*int64, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(...pg.QOpt) (*int64, error)); ok {
		return rf(qopts...)
	}
	if rf, ok := ret.Get(0).(func(...pg.QOpt) *int64); ok {
		r0 = rf(qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(...pg.QOpt) error); ok {
		r1 = rf(qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPendingMinBlock provides a mock function with given fields: blockNum, qopts
func (_m *mockORM) SetPendingMinBlock(blockNum *int64, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, blockNum)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*int64, ...pg.QOpt) error); ok {
		r0 = rf(blockNum, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WasBroadcastConsumed provides a mock function with given fields: blockHash, logIndex, jobID, qopts
func (_m *mockORM) WasBroadcastConsumed(blockHash common.Hash, logIndex uint, jobID int32, qopts ...pg.QOpt) (bool, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, blockHash, logIndex, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash, uint, int32, ...pg.QOpt) (bool, error)); ok {
		return rf(blockHash, logIndex, jobID, qopts...)
	}
	if rf, ok := ret.Get(0).(func(common.Hash, uint, int32, ...pg.QOpt) bool); ok {
		r0 = rf(blockHash, logIndex, jobID, qopts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(common.Hash, uint, int32, ...pg.QOpt) error); ok {
		r1 = rf(blockHash, logIndex, jobID, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockORM creates a new instance of mockORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockORM(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockORM {
	mock := &mockORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
